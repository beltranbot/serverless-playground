service: aws-node-project

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    tableName: ${self:custom.tableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource: '*'

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true # tell webpack that you want the lambdas to be packed individually

custom:
  tableName: player-points
  s3Sync:
    - bucketName: slstestbucket-20220210
      localDir: uploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID} # these have to be at 2 indentation
          method: GET
          cors: true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID} # these have to be at 2 indentation
          method: GET
          cors: true

  postPlayerScore:
    handler: lambdas/endpoints/postPlayerScore.handler
    events:
      - http:
          path: post-player-score/{ID} # these have to be at 2 indentation
          method: POST
          cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: slstestbucket-20220210

    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S # string
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # this makes it so everytime we read or write in the table we will be charged, other options are provisioning the read and write amounts for example
